@use "../styles/vars" as *;

button.nsc.button {
	// Reset
	border: none;
	outline: none;
	background: none;
	user-select: none;
	-webkit-user-drag: none;

	// Flex
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	gap: $padding;

	// Box
	padding: calc($padding) calc($padding * 2);
	margin: $margin;
	border: $border-width $border-style $border-color;
	border-radius: $border-radius;

	// Text
	font-size: $font-p;
	font-weight: 500;
	color: $text-color;

	// States
	transition: $transition-fast;

	// SVGs
	svg {
		transition: $transition-fast;
	}

	// Focusable
	&[focusable]:focus {
		outline: $focus;
	}

	// Circular
	&[circular] {
		border-radius: $border-radius-circular;
	}

	// Icon
	&[icon] {
		padding: $padding;
		// min-width: 2.325rem;
		min-width: calc(1rem + $padding * 2.65);

		font-size: calc($font-p * 1.325);

		// Circular
		&[circular] {
			border-radius: $border-radius-icon-circular;
		}
	}

	// Compact
	&[compact] {
		padding: calc($padding / 4) calc($padding / 2);
		font-size: $font-small;
		margin: calc($margin/2);

		&[icon] {
			padding: calc($padding / 4);

			min-width: calc($font-small + ($padding * 2.65) / 4);

			font-size: calc($font-small * 1.325);

			// Circular
			&[circular] {
				border-radius: $border-radius-icon-circular;
			}
		}
	}

	// Hollow
	&[hollow] {
		background: none;

		// Underline
		&[underline] {
			border-top: none;
			border-left: none;
			border-right: none;
			border-radius: 0;
			padding-left: 0;
			padding-right: 0;
		}
	}

	// Fill
	&[fill] {
		width: 100%;
	}

	// Emphasis
	@each $key, $value in $emphasis {
		&[emphasis="#{$key}"] {
			color: map-get($emphasis, $key + "-text");
			background: $value;
			border-color: $value;

			svg {
				fill: map-get($emphasis, $key + "-text");
			}

			&[loading] {
				div.nsc.loading {
					div.nsc.dot {
						background: map-get($emphasis, $key + "-text");
					}
				}
			}

			&[hollow] {
				background: none;
				color: $value;

				svg {
					fill: $value;
				}

				&[loading] {
					div.nsc.loading {
						div.nsc.dot {
							background: $value;
						}
					}
				}
			}

			&:hover {
				background: darken($value, 10%);
				border-color: darken($value, 10%);

				&[hollow] {
					background: none;
					color: darken($value, 10%);

					svg {
						fill: darken($value, 10%);
					}
				}
			}

			&:active,
			&[sel] {
				background: darken($value, 25%);
				border-color: darken($value, 25%);

				&[hollow] {
					background: none;
					color: darken($value, 25%);

					svg {
						fill: darken($value, 25%);
					}
				}
			}
		}
	}

	// Color
	@each $key, $value in $colors {
		&[color="#{$key}"] {
			color: $text-color-alt;
			background: $value;
			border-color: $value;

			svg {
				fill: $text-color-alt;
			}

			&[loading] {
				div.nsc.loading {
					div.nsc.dot {
						background: $text-color-alt;
					}
				}
			}

			&[hollow] {
				background: none;
				color: $value;

				svg {
					fill: $value;
				}

				&[loading] {
					div.nsc.loading {
						div.nsc.dot {
							background: $value;
						}
					}
				}
			}

			&:hover {
				background: darken($value, 10%);
				border-color: darken($value, 10%);

				&[hollow] {
					background: none;
					color: darken($value, 10%);

					svg {
						fill: darken($value, 10%);
					}
				}
			}

			&:active,
			&[sel] {
				background: darken($value, 25%);
				border-color: darken($value, 25%);

				&[hollow] {
					background: none;
					color: darken($value, 25%);

					svg {
						fill: darken($value, 25%);
					}
				}
			}
		}
	}

	// Disabled
	&[disabled] {
		opacity: 50%;
		pointer-events: none;
	}

	&[loading] {
		position: relative;
		pointer-events: none;

		opacity: 100%;

		div.nsc.children {
			opacity: 0;
		}

		div.nsc.loading {
			// Box
			width: 100%;
			height: 100%;
			position: absolute;
			top: 0;
			left: 0;

			// Flexbox
			display: flex;
			align-items: center;
			justify-content: space-evenly;

			visibility: visible;

			@for $i from 1 through 3 {
				div.nsc.dot:nth-child(3n + #{$i}) {
					animation-delay: (($i - 1) * 0.25s);
				}
			}

			div.nsc.dot {
				width: 10%;
				height: 0;
				padding-bottom: 10%;

				// @each $name, $value in $colors {
				// 	&[loadingColor="#{$name}"] {
				// 		background: $value;
				// 	}
				// }

				border-radius: 50%;

				animation: bounce 1s infinite;
				animation-fill-mode: forwards;

				transform: translateY(-0.25rem);

				@keyframes bounce {
					0% {
						transform: translateY(-0.25rem);
					}
					50% {
						transform: translateY(0.25rem);
					}
					100% {
						transform: translateY(-0.25rem);
					}
				}
			}
		}
	}
}

div.nsc.button-group {
	// Box
	margin: $margin;

	// Flexbox
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: flex-start;

	&[wrap] {
		flex-wrap: wrap;
	}

	&[split] {
		gap: $padding;
	}

	&[vertical] {
		flex-direction: column;
		align-items: flex-start;
	}

	button.nsc.button {
		margin: 0;
	}

	&:not([split]) {
		align-items: stretch;

		button.nsc.button {
			border-radius: 0;
		}

		&:not([vertical]) {
			button.nsc.button {
				&:first-child {
					border-top-left-radius: $border-radius;
					border-bottom-left-radius: $border-radius;
				}

				&:last-child {
					border-top-right-radius: $border-radius;
					border-bottom-right-radius: $border-radius;
				}
			}
		}

		&[vertical] {
			button.nsc.button {
				width: 100%;

				&:first-child {
					border-top-left-radius: $border-radius;
					border-top-right-radius: $border-radius;
				}

				&:last-child {
					border-bottom-left-radius: $border-radius;
					border-bottom-right-radius: $border-radius;
				}
			}
		}
	}
}
